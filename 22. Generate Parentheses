class Solution {
    public List<String> generateParenthesis(int n) {
        Stack<String> cake = new Stack<String>();
        char[] pan = new char[2*n];
        int open = 0;
        int close = 0;
        return recsAndStacks(pan, n, open, close, cake);        
    }
    public List<String> recsAndStacks(char[] pan, int n, int open, int close, Stack<String> cake){
        if(open == close && open == n){
            String ans = String.valueOf(pan);
            cake.push(ans);
            return cake;
        }
        if(open < n){
            pan[open + close] = '(';
            recsAndStacks(pan, n, open+1, close, cake);
        }
        if(close < open){
            pan[open + close] = ')';
            recsAndStacks(pan, n, open, close+1, cake);
        }
        return cake;
        
    }
}
